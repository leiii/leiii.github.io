<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Lei Dong | 董磊</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Lei Dong | 董磊</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Map Coordinate Transformation | 地图坐标转换</title>
      <link>/2015/08/map-coordinate-transformation--%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/08/map-coordinate-transformation--%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</guid>
      <description>在天朝搞与地理信息有关的研究不可避免的会遇到坐标转换问题，与世界通用的WGS坐标不同，天朝的地理坐标一般是“有偏”的，据说是为了安全的考虑，但也为我们进行学术研究带来了不小的麻烦。
通常来说，国内常见的坐标有两种，1)最为通行的是在WGS（真实坐标）上进行一次加偏后出来的GCJ坐标，也就是通常叫的“火星坐标”，像高德，国内的google，搜狗地图等都是用的GCJ坐标。2)还有进行二次加偏的，最有代表性的是百度，名之为“百度坐标”。
所以在研究的过程中我们为了将坐标信息匹配到实际地理空间上，需要进行坐标转换，一般都要转成WGS坐标。好在这些坐标转换规则已成为“公开的秘密”。下面一段代码是我从github上综合不同人的方法，用R写成的，欢迎进行学术研究使用。
#Coordinate #Lei Dong #2015 #Ref:https://github.com/googollee/eviltransform transformLat &amp;lt;- function (x, y){ ret &amp;lt;- -100.0 + 2.0*x + 3.0*y + 0.2*y*y + 0.1*x*y + 0.2*sqrt(abs(x)) ret &amp;lt;- ret + (20.0*sin(6.0*x*pi) + 20.0*sin(2.0*x*pi)) * 2.0 / 3.0 ret &amp;lt;- ret + (20.0*sin(y*pi) + 40.0*sin(y/3.0*pi)) * 2.0 / 3.0 ret &amp;lt;- ret + (160.0*sin(y/12.0*pi) + 320*sin(y*pi/30.0)) * 2.0 / 3.0 return (ret) } transformLon &amp;lt;- function (x, y){ ret &amp;lt;- 300.0 + x + 2.</description>
    </item>
    
    <item>
      <title>Getting Cleaning and Visualizing Data 1 | 数据获取分析与表达 1</title>
      <link>/2014/06/getting-cleaning-and-visualizing-data-1--%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E8%BE%BE-1/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/06/getting-cleaning-and-visualizing-data-1--%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E8%BE%BE-1/</guid>
      <description>昨天（6月3号）晚上，果说@Fruitalk小团体举行了一次线下沙龙。交流了关于数据获取、分析与表达的相关问题。
目前暂定会有四次，大概每次交流的提纲如下：
 总述、软件，简单的流程(例子);  有了数据，如何画图(统计回归,地图);  如何获取、处理数据;  关于定性与定量研究。  昨天是讨论的第一次，讨论提纲如下：
 1.1 目标 (Why) 1.2 软件 (Who)  1.3 过程 (How)  1.4 例子 (How+)  1.5 Tips  1.6 进一步学习的资料   完成后我们会把所有PPT上传，第一次的PPT可以点击这里下载。
欢迎感兴趣的朋友们一起交流、讨论。</description>
    </item>
    
    <item>
      <title>Notes 1 | 札记 1</title>
      <link>/2014/04/notes-1--%E6%9C%AD%E8%AE%B0-1/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/04/notes-1--%E6%9C%AD%E8%AE%B0-1/</guid>
      <description>试了各种工具，微博、微信、知乎都太碎片化，evernote记笔记不错，但越来越臃肿，发现还是博客在梳理思路、获取知识上更好。
本周琐事： 1、重读了遍Philip J. Guo的THE PH.D. GRIND，比当时读第一遍是感受更深，作者当年觉得自己不适合学术圈，但现如今又回归，不知是怎么想的。书的结尾处，Guo回答了一个问题，为什么有些人不会成为教授但却花了六年多时间读个博士？
 Why would anyone spend six or more years doing a Ph.D. when they aren’t going to become professors?
Everyone has different mo- tivations, but one possible answer is that a Ph.D. program provides a safe environment for certain types of people to push themselves far beyond their mental limits and then emerge stronger as a result.
 2、试着用Markdown语言写短文章，确实是个很好用的写作工具。（进一步了解Markdown，OS X系统下推荐Mou这个软件。）
3、Coursera上开始了约翰霍普金斯大学开的Data Science（基于R语言）的系列课程，里面有段话很有意思：</description>
    </item>
    
    <item>
      <title>Visualize This 3 | 数据可视化笔记 3</title>
      <link>/2013/12/visualize-this-3--%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0-3/</link>
      <pubDate>Sat, 21 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/12/visualize-this-3--%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0-3/</guid>
      <description> 一、饼图+ 这次让我们试PPT中经常出现的饼图。
饼图一般用来展示各部分在总体中所占的百分比，适用于数据不多的情况。虽然饼图大家用的非常多，但通常是从EXCEL中直接生成，用好的并不常见，因为大家容易忽视几个问题：
 饼图的中心点区域线和颜色过于集中，不利于视觉舒适。
 EXCEL默认的饼图配色大家见的太多后容易审美疲劳。我们可以用一种饼图的变体来解决一下上面的问题，“面包圈”图闪亮登场。
  资料来源：TU DelftX
我们可以看到，面包圈图比饼图可以放相对更多的数据而不会在中心产生过度集中现象，没有了中心集中，也有利于颜色的搭配。这种图制作也非常简单，在原来的饼图中间画个白色的圆形就行了：）
二、HeatMap 有时候数据指标比较多的情况下，很难用简单的图表来表达，这时候可以试试HeatMap，可以在二维平面上展示矩阵形式的数据。在这个例子里我们还是用到了NBA数据，简单说就是展示了不同球员的各项指标，于之前文章中提到的“脸图”不同，这种展示方式数据更加直观。在本例中洋红到浅蓝表示数据值由高到低。
bball &amp;lt;- read.csv(&amp;quot;http://datasets.flowingdata.com/ppg2008.csv&amp;quot;, header = TRUE) bball &amp;lt;- bball[order(bball$PTS, decreasing = FALSE),] #按得分PTS 降序排列数据 row.names(bball) &amp;lt;- bball$Name ball &amp;lt;- bball[, 2:20] bball_matrix &amp;lt;- data.matrix(bball) #数据必须转成矩阵型 bball_heatmap &amp;lt;- heatmap(bball_matrix, Rowv=NA, Colv = NA, col = cm.colors(256), scale=&amp;quot;column&amp;quot;, margins = c(5,10)) #cm.colors(256)表示从洋红到蓝（cm是cmyk里的两个词）  注：代码及数据来源一书
断断续续写到第三篇笔记了，想列了提纲，看看以后可以写点啥，也欢迎大家多多补充。
 0、用到的软件的最基本介绍 1、动态数据表达（1，2） 2、数据收集方式 3、数据整理方式及工具（1，2） 4、与地理信息相关的图形表达（1，2，3）  </description>
    </item>
    
    <item>
      <title>Visualize This 2 | 数据可视化笔记 2</title>
      <link>/2013/12/visualize-this-2--%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0-2/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/12/visualize-this-2--%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0-2/</guid>
      <description>上篇文章提到了一些有趣的图形，再之前一篇文章讲了用R导入地图的问题。如果把数据和地图结合可以展现更多有意思的结论。这里我们就说说与地图有关的数据可视化，所有素材都来自上文提到的Visualize This一书，但书出版后有些软件版本进行了更新，用原书中的代码会报错，所以我修订了新的代码。
准备工作： 1、软件安装。本文涉及Python及其插件BeautifulSoup（版本为4）；R及其插件maps(在R中装插件很容易，只需要输入install.packages(maps)就行)。
2、数据。美国一家商店在美国开店的数据，世界范围内国家生育率的数据，美国失业率的数据。后文会给出链接。
3、底图。一张美国的SVG底图，可以在这里下到。
第一张图： 这是一家连锁店全美开店位置图。可以看到它主要集中在东西海岸，数据在这里下载。
library(maps) #载入maps costcos &amp;lt;- read.csv(&amp;quot;http://book.flowingdata.com/ch08/geocode/costcos-geocoded.csv&amp;quot;, sep = &amp;quot;,&amp;quot;) #载入数据 map(database = &amp;quot;state&amp;quot;, col = &amp;quot;#cccccc&amp;quot;) #载入美国地图，底图设为灰色 symbols(costcos$Longitude, costcos$Latitude, bg = &amp;quot;#e2373f&amp;quot;, fg = &amp;quot;#ffffff&amp;quot;, lwd = 0.5, circles = rep(1, length(costcos$Longitude)), inches = 0.05, add = TRUE) #add=TRUE表示在上张图上叠加symbols；前两个变量代表横纵坐标；bg是填充颜色，fg是框线颜色；lwd是线的粗度；circles是圆，后面的括号代表一个数组，长度为地图上点的数量；inches表示圆的大小  第二张： 第二张图是《2008年联合国人类发展报告》中未成年人生育率（每1000名15-19岁女性中生育数量）。数据可以在这里下载。
library(maps) #载入maps fertility &amp;lt;- read.csv(&amp;quot;http://book.flowingdata.com/ch08/points/adol-fertility.csv&amp;quot;) map(&#39;world&#39;, fill = FALSE, col = &amp;quot;#cccccc&amp;quot;) #选择世界地图，不填充，底图为灰色 symbols(fertility$longitude, fertility$latitude, circles = sqrt(fertility$ad_fert_rate), add = TRUE, inches = 0.</description>
    </item>
    
    <item>
      <title>Visualize This 1 | 数据可视化笔记 1</title>
      <link>/2013/12/visualize-this-1--%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0-1/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/12/visualize-this-1--%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0-1/</guid>
      <description>熟悉NBA的人对上面的这些名字应该不会陌生，这是份NBA球员08-09赛季前50位得分手统计信息可视化，当然图上的长相反应的是它们的数据，与真实长相无关。这张图是我用自己的电脑画的，但数据和代码来自Nathan Yau写Visualize This，一本关于数据可视化方面的好书。作者是UCLA的统计学博士，还在纽约时报、CNN、Mozilla等公司工作过，是个资深的数据迷。正好趁着自己在读这本书，把书中的趣的例子记录下来，后面会陆续加入我自己的理解。
上图叫Chernoff脸谱，大家可以自行WIKI图的由来，让我们先看看不同的脸部特征在这组数据里代表着什么：
 脸的长度-出场次数 脸的宽度-平均出场时间 脸型-场均得分 嘴唇高度-场均投篮命中球数 嘴唇宽度-场均投篮次数 嘴角上扬的曲线-投篮命中率 眼睛高度-场均罚球命中次数 眼睛宽度-场均罚球数 头发高度-罚球命中率 头发宽度-场均三分球命中次数 发型-三分球投篮次数 鼻子高度-进攻篮板 鼻子宽度-防守篮板 耳朵宽度-总篮板 耳朵高度-总助攻  所以我们可以看到雷阿伦的头发特别宽（三分球命中高），霍华德耳朵特别宽（篮板多）。当然这种类型的图娱乐的性质大于其信息呈现。那么不防让我们再来看一张图：
这是一张关于美国犯罪率的图，数据来源和代码同样来自上面提到的书。图中每个小图代表一个州，这种画法叫Radar Chart或Spider Chart，右下角有图例，应该很容易明白什么意思。
当然，放上这两张图的目的只是个开始，希望通过自己的学习与分享让更多人感受到数据是好玩儿的。
说明：
1、这些可视化都基于R，我用的是R的一个比较好用的集成包RStudio。代码都来自于文中提到的书
2、第一个图需要基于一个开发包aplpack (由Hans Peter Wolf开发)，安装方式为打开R之后输入install.packages(aplpack), 画图代码如下：
library(aplpack) #载入这个包 bball &amp;lt;- read.csv(&amp;quot;http://datasets.flowingdata.com/ppg2008.csv&amp;quot;, header = TRUE) #读数据，数据来源于作者网站，也可下载到本地 faces(bball[, 2:16], ncolors = 0, labels = bball$Name) #aplpack提供的face()函数只支持最多15个变量，所以将集合缩小到从第2列到第16列。ncolors = 0表示用黑白图，不输的话可以看到彩色的， labels = bball$Name表示放置bball数据里Name变量名下的数据作为标签  3、第二个图代码如下：
crime &amp;lt;- read.csv(&amp;quot;http://datasets.flowingdata.com/crimeRateByState-formatted.csv&amp;quot;) row.name(crime) &amp;lt;- crime$state #把第一例移动到行名称 crime &amp;lt;- crime[, 2:7] #选六个变量当维度 stars(crime, flip.</description>
    </item>
    
    <item>
      <title>Map Data With R | 用R处理地图信息</title>
      <link>/2013/10/map-data-with-r--%E7%94%A8r%E5%A4%84%E7%90%86%E5%9C%B0%E5%9B%BE%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Sun, 20 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/10/map-data-with-r--%E7%94%A8r%E5%A4%84%E7%90%86%E5%9C%B0%E5%9B%BE%E4%BF%A1%E6%81%AF/</guid>
      <description>最近一直在想地图信息如何处理，问题有2个，一个是如何获取有坐标的数据信息（人口，经济指标，商铺位置等）。另一个就是如何将这些信息处理后在地图上表达。第一个问题在互联网时代不难得到，难的是获取高质量的数据。第二个问题理论上GIS类的软件都可以做到，但我对GIS一点都不了解。尝试过的ARCGIS体积大，还不支持OS X。
前几天无意中看到了几个R的library的介绍，发现原来用R也可以做GIS类的工作。而且开源软件以开放性吸引了许多优秀的作者写library，极大扩展了软件的使用方式。如果说建筑软件中RHINO是用插件武装起来的话，编程方面Python和R更是用开源包武装到了牙齿，可以正面去与商业软件PK。
对我最有用的地图library大概有这几个：
maps(内置了一些地图，但无中国）
mapdata(有中国地图，但比较老，重庆和四川还没分开）
如何搞定中国的地图请看：终于搞定了中国分省市地图，用R软件绘制中国分省市地图
有更好的办法么？特别是在Google Earth用途如此普遍的今天，能否调取Google的API，使用它们的地图数据呢？
答案是肯定的！David Kahle和Hadley Wickham制作了一个ggmap的包，解决了这个问题，极大便利了我等技术文盲。
我们可以试几个功能，更多的功能可以看看?ggmap，有些是需要配合其它的包一起使用。
geocode geocode(&amp;quot;China&amp;quot;) Information from URL : http://maps.googleapis.com/maps/api/geocode/json?address=China&amp;amp;sensor=false Google Maps API Terms of Service : http://developers.google.com/maps/terms lon lat 1 104.1954 35.86166  返回了中国的经纬度坐标。
mapdist mapdist(&#39;Tsinghua University&#39;, + &#39;Beijing University&#39;, &#39;walking&#39;) from to m km miles seconds 1 Tsinghua University Beijing University 3329 3.329 2.068641 2458 minutes hours 1 40.96667 0.6827778  从清华到北大竟然3.3公理，要41分钟，估计是从东门算的吧。
get_map library(ggmap) library(mapproj) map &amp;lt;- get_map(location = &#39;Beijing&#39;, zoom = 8) #以北京为中心，zoom代表类似放大倍数，GOOGLE API好像对此有限制，待查  京津冀地区出现了。Google地图本身就是个大的GIS系统，如果在上面一行代码里加上 maptype = &amp;lsquo;roadmap&amp;rsquo;就可以得到北京的路网图。</description>
    </item>
    
  </channel>
</rss>